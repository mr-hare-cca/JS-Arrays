
name: "Classroom Autograder – Unit 8.5: Arrays (Inputs + textContent)"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: ['**/__tests__/**/*.test.cjs']
          };
          EOF

      - name: Create tests
        run: |
          mkdir -p __tests__
          cat > __tests__/arrays.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          const wait = (ms=40) => new Promise(r => setTimeout(r, ms));
          const firstInt = s => {
            const m = String(s||'').match(/-?\d+/);
            return m ? Number(m[0]) : 0;
          };

          function find(pList){ for (const p of pList) if (fs.existsSync(p)) return p; return null; }
          function findIndex(){ return find(['index.html','public/index.html','src/index.html','docs/index.html']); }

          async function loadPage() {
            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {});

            const idx = findIndex();
            if (!idx) throw new Error('index.html not found (root/public/src/docs).');

            const baseDir = path.dirname(path.resolve(idx));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';
            const dom = await JSDOM.fromFile(idx, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            // Enforce: no prompt/alert
            dom.window.prompt = () => { throw new Error('Use inputs, not prompt().'); };
            dom.window.alert = () => { throw new Error('Use textContent, not alert().'); };

            await new Promise(res => dom.window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          function setVal(doc, id, v) {
            const el = doc.getElementById(id);
            if (!el) return false;
            el.value = String(v);
            return true;
          }

          describe('Unit 8.5 – Arrays (Inputs + textContent)', () => {
            let dom, window, document;

            beforeAll(async () => {
              dom = await loadPage();
              window = dom.window;
              document = window.document;
            });

            test('required elements exist', () => {
              ['color','n1','n2','n3','n4','n5','actionList','average','evenCount','feedback'].forEach(id => {
                expect(document.getElementById(id)).not.toBeNull();
              });
              expect(document.querySelector('button')).not.toBeNull();
              expect(typeof window.runJS).toBe('function');
            });

            test('invalid color handled with textContent (no prints)', async () => {
              setVal(document, 'color', 'blue'); // invalid
              setVal(document, 'n1', '0'); setVal(document, 'n2', '0');
              setVal(document, 'n3', '0'); setVal(document, 'n4', '0'); setVal(document, 'n5', '0');

              window.runJS(); await wait();

              const fb = (document.getElementById('feedback').textContent || '').toLowerCase();
              expect(fb).toMatch(/invalid/);

              const list = document.getElementById('actionList');
              const items = Array.from(list.children || []);
              expect(items.length).toBe(0);
            });

            test('valid color prints action x5 in #actionList', async () => {
              setVal(document, 'color', 'YELLOW'); // should map to "Slow"
              setVal(document, 'n1', '0'); setVal(document, 'n2', '0');
              setVal(document, 'n3', '0'); setVal(document, 'n4', '0'); setVal(document, 'n5', '0');

              window.runJS(); await wait();

              const list = document.getElementById('actionList');
              const items = Array.from(list.children || []);
              expect(items.length).toBeGreaterThanOrEqual(5);

              const txt = (list.textContent || '').toLowerCase();
              const slowCount = (txt.match(/slow/g) || []).length;
              expect(slowCount).toBeGreaterThanOrEqual(5);
            });

            test('numbers array → average and evens displayed via textContent', async () => {
              // 2,3,4,5,6 -> avg 4, evens 3
              setVal(document,'color','green');
              ['n1','n2','n3','n4','n5'].forEach((id,i)=>setVal(document,id,[2,3,4,5,6][i]));

              window.runJS(); await wait();

              const avgTxt = document.getElementById('average').textContent || '';
              const evTxt  = document.getElementById('evenCount').textContent || '';

              expect(firstInt(avgTxt)).toBe(4);
              expect(firstInt(evTxt)).toBe(3);
            });
          });
          EOF

      - name: Run tests and summarize
        id: jest
        continue-on-error: true
        run: |
          npx jest --runInBand --json --outputFile=jest-results.json
          node - <<'NODE'
          const fs = require('fs');
          let r = { numTotalTests:0, numPassedTests:0, numFailedTests:0, testResults:[] };
          try { r = JSON.parse(fs.readFileSync('jest-results.json','utf8')); } catch {}
          const total=r.numTotalTests||0, passed=r.numPassedTests||0, failed=r.numFailedTests||0;
          const rows = (r.testResults||[]).flatMap(t => (t.assertionResults||[]).map(a => `- ${a.status==='passed'?'✅':'❌'} ${a.title}`));
          const out = [
            '# Unit 8.5 Autograder Summary',
            `**Passed:** ${passed}/${total} · **Failed:** ${failed}`,
            '',
            '## Checks',
            ...rows
          ].join('\n');
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out);
          NODE

      - name: Fail job if any test failed
        if: steps.jest.outcome == 'failure'
        run: exit 1
