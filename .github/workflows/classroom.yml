name: "Classroom Autograder – Unit 8.5: Arrays (Console + Prompt)"

on:
  push:
  workflow_dispatch:

jobs:
  autograde:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Bootstrap test harness files
        shell: bash
        run: |
          mkdir -p tests

          # 1. Create package.json (Node.js environment)
          cat > package.json <<'PKG'
          {
            "name": "unit-8-5-prompts-consolelog",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "test": "jest --runInBand --reporters=default"
            },
            "devDependencies": {
              "jest": "^29.7.0",
              "jest-environment-node": "^29.7.0"
            }
          }
          PKG

          # 2. Create Jest config (using CommonJS - module.exports)
          cat > jest.config.js <<'JEST'
          module.exports = {
            testEnvironment: "node",
            roots: ["<rootDir>/tests"],
            testMatch: ["**/tests/**/*.test.cjs"]
          };
          JEST

          # 3. Create the VM-based test file (This harness is correct for this assignment)
          cat > tests/script.test.cjs <<'TEST'
          const fs = require("node:fs");
          const vm = require("node:vm");
          const path = require("node:path");

          // Helper to load and run student code in a sandbox
          const loadStudent = (answers) => {
            const codePath = path.resolve("script.js");
            if (!fs.existsSync(codePath)) {
              throw new Error("script.js not found. Make sure your file is in the root of the repository.");
            }
            const code = fs.readFileSync(codePath, "utf8");

            const logs = [];
            const sandbox = {
              console: { 
                log: (...args) => logs.push(args.map(String).join(" ")),
                warn: (...args) => logs.push(args.map(String).join(" ")),
                error: (...args) => logs.push(args.map(String).join(" ")),
              },
              prompt: (() => {
                const queue = [...answers];
                return () => String(queue.shift() ?? "");
              })(),
            };

            vm.createContext(sandbox);
            const script = new vm.Script(code, { filename: "script.js" });
            
            try {
              script.runInContext(sandbox, { timeout: 1000 }); // Added timeout for safety
            } catch (e) {
              // Re-throw script errors to fail the test
              throw new Error(`Your script.js file crashed: ${e.message}`);
            }

            return { logs, code };
          };

          const countOccurrences = (arr, needle) =>
            arr.reduce((acc, line) => acc + (line.trim().toLowerCase() === needle.toLowerCase() ? 1 : 0), 0);

          describe("Unit 8.5 - Arrays (Console/Prompt)", () => {

            test("REQUIRED: valid color prints correct action five times; average and evens correct", () => {
              const { logs } = loadStudent(["green", "1", "2", "3", "4", "5"]);
              
              const goCount = countOccurrences(logs, "Action: Go");
              expect(goCount).toBeGreaterThanOrEqual(5);
              expect(logs.find(l => /Invalid color/i.test(l))).toBeUndefined();

              const avgLine = logs.find(l => /^Average:\s*-?\d+(?:\.\d+)?$/.test(l.trim()));
              expect(avgLine).withContext("Could not find 'Average: #' line in console.").toBeDefined();
              const avgValue = Number(avgLine.split(":")[1].trim());
              expect(avgValue).toBeCloseTo(3, 6);

              const evenLine = logs.find(l => /^Even count:\s*\d+$/.test(l.trim()));
              expect(evenLine).withContext("Could not find 'Even count: #' line in console.").toBeDefined();
              const evenVal = Number(evenLine.split(":")[1].trim());
              expect(evenVal).toBe(2);
            });

            test("INVALID_COLOR: prints 'Invalid color' and does not print five actions", () => {
              const { logs } = loadStudent(["blue", "10", "20", "30", "40", "50"]);
              const invalid = logs.find(l => /^Invalid color$/i.test(l.trim()));
              expect(invalid).withContext("Did not find 'Invalid color' in console.").toBeDefined();

              const totalActions = logs.filter(l => /^Action:/.test(l.trim())).length;
              expect(totalActions).toBeLessThan(5);
            });

            test("NO_FUNCTIONS: no function or arrow syntax used", () => {
              const { code } = loadStudent(["red", "1", "2", "3", "4", "5"]);
              expect(/\bfunction\b/.test(code) || /=>/.test(code)).toBe(false);
            });
            
          });
          TEST

      - name: Debug File Structure
        if: always()
        shell: bash
        run: |
          echo "---- DEBUG: File System Structure ----"
          ls -R
          echo "---- END DEBUG: File System Structure ----"

      - name: Install dependencies
        run: npm install

      # ----------------------------------------------------------------
      # NEW: Simplified Graders
      # Runs each test one by one and captures the result.
      # This is the correct way to use the autograding-reporter.
      # ----------------------------------------------------------------
      - name: Run REQUIRED tests
        id: t_required
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: "REQUIRED: Full functionality"
          command: "npx jest --runInBand --testNamePattern 'REQUIRED:'"
          timeout: 10
          max-score: 60

      - name: Run INVALID_COLOR tests
        id: t_invalid_color
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: "INVALID_COLOR: Handles invalid color"
          command: "npx jest --runInBand --testNamePattern 'INVALID_COLOR:'"
          timeout: 10
          max-score: 25

      - name: Run NO_FUNCTIONS tests
        id: t_no_functions
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: "NO_FUNCTIONS: No functions used"
          command: "npx jest --runInBand --testNamePattern 'NO_FUNCTIONS:'"
          timeout: 10
          max-score: 15

      - name: Prepare reporter env
        id: prep_env
        if: always()
        shell: bash
        run: |
          echo "T_REQUIRED_RESULTS=${{ steps.t_required.outputs.result }}" >> "$GITHUB_ENV"
          echo "T_INVALID_COLOR_RESULTS=${{ steps.t_invalid_color.outputs.result }}" >> "$GITHUB_ENV"
          echo "T_NO_FUNCTIONS_RESULTS=${{ steps.t_no_functions.outputs.result }}" >> "$GITHUB_ENV"

      - name: Classroom Reporter
        id: reporter
        if: always()
        uses: classroom-resources/autograding-grading-reporter@v1
        with:
          runners: 't_required,t_invalid_color,t_no_functions'
          token: ${{ github.token }}

      - name: Show grade in summary
        if: always()
        shell: bash
        run: |
          # Helper function
          parse_json () {
            if [ -z "$1" ]; then
              echo "❌ Skipped";
              return
            fi
            # Use jq to safely parse the status
            echo $1 | jq -r 'if .status == "pass" then "✅ Pass" else "❌ Fail" end'
          }
          # Export the function so it's available to command substitution
          export -f parse_json

          # Build a single string with \n for newlines
          SUMMARY_CONTENT="## Unit 8.5 — Autograder Summary\n\n"
          SUMMARY_CONTENT+="| Check | Status |\n"
          SUMMARY_CONTENT+="|---|---|\n"
          SUMMARY_CONTENT+="| REQUIRED: Full functionality | $(parse_json '${{ steps.t_required.outputs.result }}') |\n"
          SUMMARY_CONTENT+="| INVALID_COLOR: Handles invalid color | $(parse_json '${{ steps.t_invalid_color.outputs.result }}') |\n"
          SUMMARY_CONTENT+="| NO_FUNCTIONS: No functions used | $(parse_json '${{ steps.t_no_functions.outputs.result }}') |\n"
          
          # Use echo -e to print the string with newlines
          echo -e "$SUMMARY_CONTENT" >> "$GITHUB_STEP_SUMMARY"
